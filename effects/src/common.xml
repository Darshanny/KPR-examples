<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/scroller" id="SCROLLER"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="mobile/tool" id="TOOL"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<texture id="toolTexture" small="./assets/tools.png"/>
	<variable id="toolSkin" value="new CONTROL.Skin(toolTexture, THEME.toolSelectedEffect, THEME.toolEnabledEffect, THEME.toolSelectedEffect)"/>

	<texture id="rightMenuTexture" small="./assets/rightMenu.png"/>
	<skin id="rightMenuSkin" texture="rightMenuTexture"  x="0" y="0" width="90" height="70">
		<tiles left="25" right="55" top="30" bottom="30"/>
		<margins left="20" right="20" top="20" bottom="20"/>
	</skin>
	<skin id="rightPanelSkin" texture="rightMenuTexture"  x="0" y="70" width="90" height="20">
		<tiles left="20" right="20" top="0" bottom="0"/>
	</skin>
	<texture id="rightMenuButtonTexture" small="./assets/rightMenuButton.png"/>
	<skin id="rightMenuBulletSkin" texture="rightMenuButtonTexture" x="o" y="0" width="30" height="30">
		<states offset="30"/>
	</skin>
	<style id="menuActionItemStyle" font="bold 20px" align="center,middle">
		<states colors="white,white,#acd473"/>
	</style>
	<style id="menuCommandItemStyle" font="bold 20px" align="left,middle">
		<states colors="white,white,#acd473"/>
		<margins left="0" right="15" top="0" bottom="0"/>
	</style>
	<skin id="menuSeparatorSkin" color="gray"/>

	<style id="sliderLabelStyle" font="bold 14px" align="left,bottom">
		<states colors="white,white,#acd473"/>
	</style>
	<style id="titleStyle" font="bold 24px" align="left,middle"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<behavior id="MainScreenBehavior" like="MODEL.ScreenBehavior"><![CDATA[
		function onBodyChanged(screen) {
			this.data.menu.LIST.distribute("sync");
		}
		function onCreate(screen, data, context) {
			this.context = this;
			data.build.call(this, data.BODY);
		}
		function onItemTap(screen) {
			var data = this.data;
			var menu = data.menu;
			var item = menu.items[menu.selection];
			item.value.call(null, data.BODY, data);
		}
		function onTouchBegan(container, id, x, y, ticks) {
			var data = this.data;
			var pane = data.menu.PANE;
			if (pane.visible && !pane.hit(x, y)) {
				pane.visible = false;
				data.TOOL.container.active = true;
			}
		}
	]]></behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="MainScreen" like="SCREEN.EmptyScreen" active="true">
		<container anchor="BODY" like="SCREEN.EmptyBody" skin="THEME.whiteSkin"/>
		<container like="Header"/>
	</container>

	<container id="HeaderTitle" left="0" right="0" top="0" bottom="0">
		<label anchor="TITLE" top="0" bottom="0" left="10" string="$.title"/>
	</container>

	<container id="Header" left="0" right="0" top="0" bottom="0">
		<container anchor="HEADER" like="SCREEN.EmptyHeader">
			<container like="HeaderTitle"/>
			<container like="TOOL.ToolButton" active="true">
				<behavior like="CONTROL.ButtonBehavior"><![CDATA[
					function onTap(container) {
						var pane = this.data.menu.PANE;
						pane.visible = true;
						container.active = false;
					}
				]]></behavior>
				<content skin="toolSkin"/>
			</container>
		</container>
		<scope with="$.menu">
			<layout anchor="PANE" right="10" top="60" visible="false" skin="rightMenuSkin">
				<behavior><![CDATA[
					function onMeasureHorizontally(container) {
						var size = container.first.first.measure();
						container.container.previous.coordinates = { left:0, right:0, top:50, bottom:0};
						return size.width;
					}
					function onMeasureVertically(container) {
						var size = container.first.first.measure();
						return Math.min(size.height, application.height - 70);
					}
				]]></behavior>
				<scroller like="MenuScroller"/>
			</layout>
		</scope>
	</container>

	<scroller id="MenuScroller" left="0" right="0" top="0" bottom="0" behavior="SCROLLER.VerticalScrollerBehavior" active="true" clip="true">
		<column anchor="LIST" left="0" right="0" top="0">
			<behavior><![CDATA[
				function change(container) {
					container.distribute("sync");
				}
				function onCreate(column, data, context) {
					this.data = data;
					var items = data.items;
					var c = items.length;
					for (var i = 0; i < c; i++) {
						var item = items[i];
						column.add(new item.Item(item, context));
					}
				}
				function onDisplaying(container) {
					container.distribute("sync");
				}
				function onItemTap(column, content) {
					var data = this.data;
					var selection = content.index;
					if (data.selection != selection) {
						column.content(data.selection).first.visible = false;
						content.first.visible = true;
						data.selection = selection;
						return false;
					}
					return true;
				}	
			]]></behavior>
		</column>
		<content like="SCROLLER.TopScrollerShadow"/>
		<content like="SCROLLER.BottomScrollerShadow"/>
	</scroller>
	
	<line id="MenuActionItem" left="0" right="0" height="44" active="true">
		<behavior like="CONTROL.ButtonBehavior"><![CDATA[
			function onTap(content) {
				var context = this.context;
				this.data.action.call(context, context.data.BODY);
				context.onBodyChanged();
			}
		]]></behavior>
		<label left="0" right="0" top="4" bottom="4" string="$.title" style="menuActionItemStyle"/>
	</line>
	
	<line id="MenuCommandItem" left="0" right="0" height="44" active="true">
		<behavior like="CONTROL.ButtonBehavior"><![CDATA[
			function onTap(content) {
				var command = this.data.command;
				var context = this.context;
				command.call(context, context.data.BODY);
				context.data.command = command;
				context.onBodyChanged();
			}
			function sync(container) {
				container.first.visible = this.context.data.command == this.data.command;
			}
		]]></behavior>
		<content width="30" height="44" skin="rightMenuBulletSkin" visible="false"/>
		<label left="0" top="4" bottom="4" string="$.title" style="menuCommandItemStyle"/>
	</line>
	
	<line id="MenuSeparator" left="0" right="0" active="true">
		<content left="3" right="3" height="1" skin="menuSeparatorSkin"/>
	</line>

</program>
