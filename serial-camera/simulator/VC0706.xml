<?xml version="1.0" encoding="utf-8"?>
<module xmlns="http://www.kinoma.com/kpr/1">

	<require path="PinsSimulators" id="PinsSimulators"/>

	<function id="configure" params="configuration"><![CDATA[
		
		this.pinsSimulator = shell.delegate("addSimulatorPart", {
			header : { 
				label : "Camera", 
				name : "Serial Camera", 
				iconVariant : PinsSimulators.SENSOR_MODULE 
			},
			axes : [
				new PinsSimulators.FloatAxisDescription(
					{
						ioType : "output",
						valueLabel : "Compression",
						valueID : "compression"
					}
				),
				new PinsSimulators.FloatAxisDescription(
					{
						ioType : "output",
						valueLabel : "Width",
						valueID : "width"
					}
				),
				new PinsSimulators.FloatAxisDescription(
					{
						ioType : "output",
						valueLabel : "Height",
						valueID : "height"
					}
				),
			]
		});
		this.pinsSimulator.add( new ImageMaker() );
	]]></function>

	<function id="close"><![CDATA[
		shell.delegate("removeSimulatorPart", this.pinsSimulator);
	]]></function>

	<function id="setCompression" params="value"><![CDATA[
		this.pinsSimulator.delegate("setValue", "compression", value);
		gCompression = value;
		this.pinsSimulator.last.delegate("createJPEG");
	]]></function>

	<function id="setImageSize" params="size"><![CDATA[
		this.pinsSimulator.delegate("setValue", "width", size.w);
		this.pinsSimulator.delegate("setValue", "height", size.h);
		gWidth = size.w;
		gHeight = size.h;
		this.pinsSimulator.last.delegate("createJPEG");
	]]></function>

	<function id="capture"><![CDATA[
	trace("capture is returning chunk with length: " + gJPEG_Chunk.length);
		return gJPEG_Chunk;
	]]></function>

	<content id="ImageMaker">
		<behavior>
			<method id="onCreate" params="content, data">
				this.ready = false;
			</method>
			<method id="onDisplaying" params="content">
				this.ready = true;
				this.createJPEG(content);
			</method>
			<method id="onComplete" params="content, message, chunk">
			trace("\n onComplete chunk.length: " + chunk.length)
				gJPEG_Chunk = chunk;
			</method>
			<method id="createJPEG" params="content">
				// application triggers this at onLaunch() time, which is before containment hierarchy
				// has been connected together (content.container links), so we can't yet create the JPEG
				// so we wait until onDisplaying to do the first capture
				if (this.ready == true)
					content.invoke( new Message("/capture-jpeg"), Message.CHUNK );
			</method>
		</behavior>
	</content>

	<handler path="/capture-jpeg">
		<behavior>
			<method id="onInvoke" params="handler, message">
				var canvas = new Canvas( { left : 0, top : 0, width : gWidth, height : gHeight } );
				var ctx = canvas.getContext( "2d" );

				ctx.translate(canvas.width / 2, canvas.height / 2);		// translate context to center of canvas
				ctx.rotate(Math.PI);									// rotate 180 degrees
				ctx.translate(-canvas.width / 2, -canvas.height / 2);	// translate back to normal

				ctx.beginPath();
				ctx.fillStyle = "black";
				ctx.rect(0, 0, canvas.width, canvas.height);
				ctx.fill();

				ctx.beginPath();
				ctx.fillStyle = "white";
				ctx.rect(10, 10, canvas.width - 20, canvas.height - 20);
				ctx.fill();

				ctx.beginPath();
				ctx.fillStyle = "black";
				ctx.rect(20, 20, canvas.width - 40, canvas.height - 40);
				ctx.fill();

				ctx.font = "bold 24px Arial";
				ctx.textAlign = "left";
				ctx.fillStyle = "white";
				ctx.fillText("Compression: " + gCompression, 50, 50);
				ctx.fillText("Width: " + gWidth, 50, 75);
				ctx.fillText("Height: " + gHeight, 50, 100);
				
				shell.add(canvas);
				var layer = new Layer( { acceleration : false, alpha : false } );
				layer.attach(canvas);

				layer.setResponseJPEG(message);
				
				layer.detach();
				shell.remove(canvas);
			</method>
		</behavior>
	</handler>

	<script><![CDATA[
		exports.pins = {
			serial: {type: "Serial", baud: 38400  }
		};
		var gWidth = 0, gHeight = 0;
		var gJPEG_Chunk = null;
		var gCompression = 0;
	]]></script>

</module>