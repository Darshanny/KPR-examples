<program xmlns="http://www.kinoma.com/kpr/1">
	
	<script><![CDATA[
		var channels = [
			{ id: "covers", title: "Covers", thumbnail: "covers120.jpg", description: "Just Covers, songs you know only not by the original artists. We've got you covered.", screen_name: "covers" },
			{ id: "indiepop130", title: "Indie Pop Rocks!", thumbnail: "indychick.jpg", description: "New and favorite classic indie pop tracks.", screen_name: "indiepop" },
			{ id: "secretagent", title: "Secret Agent", thumbnail: "secretagent120.jpg", description: "The soundtrack for your stylish, mysterious, dangerous life. For Spies and PIs too!", screen_name: "secretagent" },
			{ id: "groovesalad", title: "Groove Salad", thumbnail: "groovesalad120.gif", description: "A nicely chilled plate of ambient beats and grooves.", screen_name: "groovesalad" },
			{ id: "dronezone", title: "Drone Zone", thumbnail: "dronezone120.jpg", description: "Served best chilled, safe with most medications. Atmospheric textures with minimal beats.", screen_name: "dronezone" },
			{ id: "missioncontrol", title: "Mission Control", thumbnail: "missioncontrol120.jpg", description: "Live and historic NASA mission audio mixed with electronic ambient.", screen_name: "missioncontrol" },
			{ id: "suburbsofgoa", title: "Suburbs of Goa", thumbnail: "sog120.jpg", description: "Desi-influenced Asian world beats and beyond.", screen_name: "suburbsofgoa" },
			{ id: "lush", title: "Lush", thumbnail: "lush120.jpg", description: "Sensuous and mellow vocals, mostly female, with an electronic influence.", screen_name: "lush" },
			
			{ id: "tags", title: "Tag's Trip", thumbnail: "tagstrancefract.jpg", description: "Progressive house / trance. Tip top tunes.", screen_name: "tags" },
			{ id: "u80s", title: "Underground 80s", thumbnail: "u80s-120.png", description: "Early 80s UK Synthpop and a bit of New Wave.", screen_name: "u80s" },
			{ id: "sonicuniverse", title: "Sonic Universe", thumbnail: "sonicuniverse120.jpg", description: "A mix of avant garde jazz, euro jazz and nu jazz. Eclectic takes on traditional jazz.", screen_name: "sonicuniverse" },
			{ id: "digitalis", title: "Digitalis", thumbnail: "digitalis120.gif", description: "Digitally affected analog rock to calm the agitated heart. Screengazing encouraged. ", screen_name: "digitalis" },
			{ id: "poptron", title: "PopTron!", thumbnail: "poptron120.png", description: "Electropop and indie dance rock with sparkle and pop.", screen_name: "poptron" },
			{ id: "bootliquor", title: "Boot Liquor", thumbnail: "bootliquor.gif", description: "Americana roots music with a bit of attitude. For Cowhands, Cowpokes and Cowtippers.", screen_name: "bootliquor" },
			{ id: "beatblender", title: "Beat Blender", thumbnail: "blender.gif", description: "A late night blend of deep-house and downtempo chill.", screen_name: "beatblender" },
			{ id: "doomed", title: "Doomed", thumbnail: "doomed.gif", description: "Dark music for tortured souls. A haunted industrial/ambient soundtrack.", screen_name: "doomed" },
		];
		var defaultImages = [
			{uri: "http://k3.cloud.kinoma.com/assets/default01.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default02.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default03.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default04.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default05.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default06.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default07.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default08.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default09.jpg"},
			{uri: "http://k3.cloud.kinoma.com/assets/default10.jpg"}
		];
		
		var channelTickSkin = function() {
			var space = 5;
			var size = 10 * space;
			var canvas = new Canvas({width:size, height:size});
			var ctx = canvas.getContext("2d");
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.lineWidth = 0.5;
			ctx.strokeStyle = "#90dc57";
			for (var x = 1; x < size; x += space) {
				ctx.beginPath();
				ctx.moveTo(x, 0);
				ctx.lineTo(x, size);
				ctx.stroke();
			}
			return new Skin(new Texture(canvas, 1), {x:0, y:0, width:size, height:20}, 0, 0, { left:0, right: 0});
		}();
		
		var customEffectIndex = 0;
	]]></script>
	<skin id="channelBarSkin" color="#77b648"/>

	<media id="RadioMedia" width="0" height="0">
		<behavior>
			<method id="onCreate" params="media, $"><![CDATA[
				this.data = $;
				media.url = Message.URI('/getAudioMedia?id=' + channels[$.index].id);
			]]></method>
			<method id="onLoaded" params="media"><![CDATA[
				var data = this.data;
				media.start();
				media.volume = data.running ? data.volume : 0;
			]]></method>
			<method id="onMetadataChanged" params="media"><![CDATA[
				var data = this.data;
				data.title = media.title;
				data.artist = media.artist;
				application.distribute("onSongChanged");
			]]></method>
			<method id="onStateChanged" params="media"><![CDATA[
				var data = this.data;
				switch (media.state) {
				case Media.FAILED:
					data.busy = true;
					break;
				case Media.PAUSED:
					data.busy = false;
					break;
				case Media.PLAYING:
					data.busy = false;
					break;
				case Media.WAITING:
					data.busy = true;
					break;
				}
				application.distribute("onBusyChanged");
			]]></method>
		</behavior>
	</media>

	<container id="Radio" left="0" right="0" top="0" bottom="0">
		<behavior>
			<method id="onCreate" params="container, $"><![CDATA[
				var data = this.data = $.radio;
				container.replace(container.first, data.media);
				data.running = true;
				data.media.volume = data.volume;
			]]></method>
			<method id="onChannelChanged" params="container, index"><![CDATA[
				var data = this.data;
				if (data.index != index) {
					data.artist = "";
					data.busy = true;
					data.index = index;
					data.title = "";
					model.savePreferences();
					container.distribute("onBusyChanged");
					container.distribute("onSongChanged");
					container.first.url = Message.URI('/getAudioMedia?id=' + channels[index].id);
				}
			]]></method>
			<method id="onScreenEnding" params="container"><![CDATA[
				var data = this.data;
				data.running = false;
				data.media.volume = 0;
				container.replace(container.first, new Content);
			]]></method>
			<method id="onVolumeChanged" params="container, volume"><![CDATA[
				container.first.volume = volume;
			]]></method>
		</behavior>
		<scope with="$.radio">
			<content/>
			<container like="Tuner" active="true"/>
			<container like="Collage" visible="false"/>
		</scope>
	</container>
	
	<container id="Tuner" left="0" right="0" top="0" bottom="0"  skin="$.theme.skin" style="$.theme.style" backgroundTouch="true">
		<behavior>
			<method id="onBusyChanged" params="container"><![CDATA[
				this.reset(container);
			]]></method>
			<method id="onCreate" params="container, $"><![CDATA[
				this.data = $;
				container.duration = 5 * 1000;
				container.start();
			]]></method>
			<method id="onFinished" params="container"><![CDATA[
				container.container.run(new CollageOpenTransition, container, container.next);
			]]></method>
			<method id="onTouchBegan" params="container"><![CDATA[
				this.reset(container);
			]]></method>
			<method id="onTouchCancelled" params="container"><![CDATA[
				this.reset(container);
			]]></method>
			<method id="onTouchEnded" params="container"><![CDATA[
				this.reset(container);
			]]></method>
			<method id="reset" params="container"><![CDATA[
				container.stop();
				container.time = 0;
				container.start();
			]]></method>
		</behavior>
		<canvas left="0" width="320" top="0" height="40" active="true">
			<behavior>
				<method id="draw" params="canvas"><![CDATA[
					var theme = this.data.theme;
					var ctx = canvas.getContext("2d");
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					ctx.fillStyle = theme.hiliteColor;
					var x = this.index;
					for (var i = 0; i < 16; i++) {
						var r = (x < 160) ? x * 16 / 160 : 16 - ((x - 160) * 16 / 160);
						ctx.beginPath();
						ctx.arc(x + r, 20, r, 0, 2 * Math.PI);
						ctx.closePath();
						ctx.fill();
						x += (2 * r) + 8;
					}
				]]></method>
				<method id="onBusyChanged" params="canvas"><![CDATA[
					var busy = this.data.busy;
					canvas.visible = busy;
					if (busy)
						canvas.start();
					else
						canvas.stop();
				]]></method>
				<method id="onCreate" params="canvas, $"><![CDATA[
					this.data = $;
					this.index = 15;
					this.draw(canvas);
					this.onBusyChanged(canvas);
				]]></method>
				<method id="onDisplaying" params="canvas"><![CDATA[
					canvas.interval = 25;
					canvas.start();
				]]></method>
				<method id="onTimeChanged" params="canvas"><![CDATA[
					var index = this.index - 1;
					if (index < 0)
						index = 15;
					this.index = index;
					this.draw(canvas);
				]]></method>
			</behavior>
		</canvas>	
		<scroller left="0" right="0" top="0" height="40" visible="false" active="true" loop="true" clip="true">
			<behavior>
				<method id="onBusyChanged" params="scroller"><![CDATA[
					scroller.visible = !this.data.busy;
					this.tick(scroller)
				]]></method>
				<method id="onCreate" params="scroller, $"><![CDATA[
					this.data = $;
				]]></method>
				<method id="onDisplaying" params="scroller"><![CDATA[
					this.onBusyChanged(scroller);
					this.onSongChanged(scroller);
				]]></method>
				<method id="onSongChanged" params="scroller"><![CDATA[
					var title = this.data.title;
					var artist = this.data.artist;
					if (artist) title += " - " + artist;
					scroller.first.string = " " + title + " ";
					this.tick(scroller)
				]]></method>
				<method id="onTimeChanged" params="scroller"><![CDATA[
					scroller.scrollBy(1, 0);
				]]></method>
				<method id="tick" params="scroller"><![CDATA[
					scroller.interval = 25;
					if (scroller.visible && (scroller.width < scroller.first.width))
						scroller.start();
					else
						scroller.stop();
				]]></method>
			</behavior>
			<label style="radioTitleStyle"/>
		</scroller>
		<scroller left="0" right="0" height="140" active="true" clip="true">
			<behavior like="SCROLLER.HorizontalScrollerBehavior" >
				<method id="onCreate" params="scroller, $"><![CDATA[
					SCROLLER.HorizontalScrollerBehavior.prototype.onCreate.call(this, scroller, $);
					this.index = $.index;
				]]></method>
				<method id="onDisplaying" params="scroller"><![CDATA[
					SCROLLER.HorizontalScrollerBehavior.prototype.onDisplaying.call(this, scroller);
					scroller.scroll = { x:channels[this.index].offset - 160, y:0 };
				]]></method>
				<method id="onScrolled" params="scroller"><![CDATA[
					if (!scroller.tracking)
						scroller.bubble("onChannelChanged", this.index);
				]]></method>
				<method id="snap" params="scroller, position, direction"><![CDATA[
					var c = channels.length;
					position += 160;
					var left = channels[0].offset;
					if (position < left) {
						this.index = 0;
						return left - 160;
					}
					for (var i = 1; i < c; i++) {
						var right = channels[i].offset;
						if (position < right) {
							if (position - left < right - position) {
								this.index = i - 1;
								return left - 160;
							}
							this.index = i;
							return right - 160;
						}
						left = right;
					}
					this.index = c - 1;
					return right - 160;
				]]></method>
			</behavior>
			<layout left="0" height="140">
				<behavior>
					<method id="onMeasureHorizontally" params="layout, width"><![CDATA[
						var container = layout.first.next;
						var i = 0;
						var bottomCoordinates = { left:0, width:0, height:140, bottom:0 };
						var bottomLabelCoordinates = { left:0, right:0, height:40, bottom:10 };
						var bottomBarCoordinates = { left:0, width:3, height:35, bottom:45 };
						var topCoordinates = { left:0, width:0, top:0, height:140 };
						var topLabelCoordinates = { left:0, right:0, top:10, height:40, };
						var topBarCoordinates = { left:0, width:3, top:45, height:35 };
						while (container) {
							var channel = channels[i];
							var size = radioChannelStyle.measure(channel.title);
							var width = size.width;
							var half = width >> 1;
							if (i == 0) {
								bottomCoordinates.left = 160 - half;
								topCoordinates.left = 160 - half;
							}
							if (i % 2) {
								bottomCoordinates.width = width;
								container.coordinates = bottomCoordinates;
								container.first.coordinates = bottomLabelCoordinates;
								bottomBarCoordinates.left = half - ((bottomCoordinates.left + half) % 5);
								container.last.coordinates = bottomBarCoordinates;
								channel.offset = bottomCoordinates.left + bottomBarCoordinates.left + 1;
								bottomCoordinates.left += width;
							}
							else {
								topCoordinates.width = width;
								container.coordinates = topCoordinates;
								container.first.coordinates = topLabelCoordinates;
								topBarCoordinates.left = half - ((topCoordinates.left + half) % 5);
								container.last.coordinates = topBarCoordinates;
								channel.offset = topCoordinates.left + topBarCoordinates.left;
								topCoordinates.left += width;
							}
							container = container.next;
							i++;
						}
						bottomCoordinates.left += 160 - half;
						topCoordinates.left += 160 - half;
						return Math.max(bottomCoordinates.left, topCoordinates.left);
					]]></method>
				</behavior>
				<content left="-320" right="-320" height="20" skin="channelTickSkin"/>
				<iterate on="channels">
					<container>
						<label style="radioChannelStyle" string="$.title"/>
						<content skin="channelBarSkin"/>
					</container>
				</iterate>
			</layout>
			<canvas left="145" width="30" height="30" active="true">
				<behavior>
					<method id="draw" params="canvas"><![CDATA[
						var theme = this.data.theme;
						var ctx = canvas.getContext("2d");
						ctx.clearRect(0, 0, canvas.width, canvas.height);
						ctx.beginPath();
						ctx.arc(16, 15, 11, 0, 2 * Math.PI);
						ctx.closePath();
						ctx.lineWidth = 2;
						ctx.fillStyle = theme.backgroundColor;
						ctx.fill();
						ctx.strokeStyle = theme.foregroundColor;
						ctx.stroke();
					]]></method>
					<method id="onCreate" params="canvas, $"><![CDATA[
						this.data = $;
						this.draw(canvas);
					]]></method>
				</behavior>
			</canvas>	
		</scroller>
		<canvas width="240" height="60" bottom="0" active="true">
			<behavior like="CanvasSliderBehavior">
				<method id="setValue" params="canvas, value"><![CDATA[
					CanvasSliderBehavior.prototype.setValue.call(this, canvas, value);
					canvas.bubble("onVolumeChanged", value);
				]]></method>
			</behavior>
		</canvas>
		<!--
		<canvas left="0" width="60" height="60" bottom="0" active="true">
			<behavior like="CanvasButtonBehavior">
				<method id="draw" params="canvas"><![CDATA[
					var data = this.data;
					var theme = data.theme;
					var ctx = canvas.getContext("2d");
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					ctx.fillStyle = canvas.state > 1 ? theme.hiliteColor : theme.foregroundColor;
					if (data.running) {
						ctx.roundRect(19, 21, 8, 28, 3);
						ctx.fill();
						ctx.roundRect(33, 21, 8, 28, 3);
						ctx.fill();
					}
					else {
						ctx.beginPath();
						ctx.moveTo(18, 35);
						ctx.arcTo(18, 20, 48, 35, 3);
						ctx.arcTo(48, 35, 18, 50, 3);
						ctx.arcTo(18, 50, 18, 35, 3);
						ctx.closePath();
						ctx.fill();
					}
				]]></method>
				<method id="onTap" params="canvas"><![CDATA[
					var data = this.data;
					if (data.running) {
						data.running = false;
						model.savePreferences();
						data.media.volume = 0;
					}
					else {
						data.running = true;
						model.savePreferences();
						data.media.volume = data.volume;
					}
					this.draw(canvas);
				}
			</behavior>
		</canvas>
		-->
	</container>
	
	<container id="Collage" left="0" right="0" top="0" bottom="0" style="$.theme.collageStyle">
		<behavior>
			<method id="doBrowse" params="container, delta"><![CDATA[
				var c = this.images.length;
				var i = this.index + delta;
				if (i >= c) i = 0;
				this.index = i;
				this.loading = true;
				var picture = new Picture({ left:0, top:0 });
				picture.behavior = new CollagePictureBehavior(picture, this.images[i], this.data.theme);
				this.data.IMAGE = picture;
			]]></method>
			<method id="onComplete" params="container, message, json"><![CDATA[
				if (json && ("result" in json) && ("images" in json.result) && json.result.images.length)
					this.images = json.result.images;
				else
					this.images = defaultImages;
				container.stop();
				this.index = 0;
				this.doBrowse(container, 0);
			]]></method>
			<method id="onCreate" params="container, $"><![CDATA[
				this.data = $;
				container.duration = 9000;
				this.images = defaultImages;
				this.index = 0;
				this.doBrowse(container, 0);
				this.onSongChanged(container);
			]]></method>
			<method id="onFinished" params="container"><![CDATA[
				if (!this.loading)
					container.run(new CollageTransition, container.first, this.data.IMAGE);
			]]></method>
			<method id="onLoaded" params="container"><![CDATA[
				if (this.data.IMAGE.ready) {
					this.loading = false;
					if (!container.transitioning && !container.running)
						container.run(new CollageTransition, container.first, this.data.IMAGE);
				}
				else
					this.doBrowse(container, 1);
			]]></method>
			<method id="onSongChanged" params="container"><![CDATA[
				var artist = this.data.artist;
				var title = this.data.title;
				var message = new Message("http://k3.cloud.kinoma.com/api");
				message.method = "POST";
				var transaction = {
					"action": "Artist",
					"method": "getImages",
					"data": {
						"artistName": artist,
						"albumName": title,
						"screenWidth": application.width,
						"screenHeight": application.height,
						"screenMode": "max",
						"shuffle": false,
						"limit": 30
					}
				}
				var body = JSON.stringify(transaction);
				message.requestText = body;
				message.setRequestHeader("Content-Length", body.length);
				container.invoke(message, Message.JSON);
			]]></method>
			<method id="onTouchBegan" params="container"><![CDATA[
				container.container.run(new CollageCloseTransition, container.previous, container);
			]]></method>
			<method id="onTransitionBeginning" params="container"><![CDATA[
				this.doBrowse(container, 1);
			]]></method>
			<method id="onTransitionEnded" params="container"><![CDATA[
				application.purge();
				container.time = 0;
				container.start();
			]]></method>
		</behavior>
		<content/>
		<scroller left="0" right="0" top="0" height="40" visible="false" active="true" loop="true" clip="true">
			<behavior>
				<method id="onBusyChanged" params="scroller"><![CDATA[
					scroller.visible = !this.data.busy;
					this.tick(scroller)
				]]></method>
				<method id="onCreate" params="scroller, $"><![CDATA[
					this.data = $;
				]]></method>
				<method id="onDisplaying" params="scroller"><![CDATA[
					this.onBusyChanged(scroller);
					this.onSongChanged(scroller);
				]]></method>
				<method id="onSongChanged" params="scroller"><![CDATA[
					var title = this.data.title;
					var artist = this.data.artist;
					if (artist) title += " - " + artist;
					scroller.first.string = " " + title + " ";
					this.tick(scroller)
				]]></method>
				<method id="onTimeChanged" params="scroller"><![CDATA[
					scroller.scrollBy(1, 0);
				]]></method>
				<method id="tick" params="scroller"><![CDATA[
					scroller.interval = 25;
					if (scroller.visible && (scroller.width < scroller.first.width))
						scroller.start();
					else
						scroller.stop();
				]]></method>
			</behavior>
			<label style="radioTitleStyle"/>
		</scroller>
		<container like="DigitalClockPane"/>
		<label left="0" right="0" height="40" bottom="0" style="radioTitleStyle">
			<behavior>
				<method id="onCreate" params="label, $"><![CDATA[
					this.data = $;
					this.onSongChanged(label);
				]]></method>
				<method id="onSongChanged" params="label"><![CDATA[
					var $ = this.data;
					label.string = channels[$.index].title;
				]]></method>
			</behavior>
		</label>
	</container>
	<behavior id="CollageLayerBehavior">
		<method id="onCreate" params="layer, $"><![CDATA[
			layer.duration = 10000;
			layer.opacity = 0;
			layer.subPixel = true;
			this.dx = $.dx;
			this.dy = $.dy;
		]]></method>
		<method id="onTimeChanged" params="layer"><![CDATA[
			var dx = this.dx;
			var dy = this.dy;
			var f = layer.fraction;
			layer.translation = { x: 0 - (f * dx), y: 0 - (f * dy) };
		]]></method>
	</behavior>
	<behavior id="CollagePictureBehavior">
		<method id="onCreate" params="picture, $, theme"><![CDATA[
			picture.aspect = "draw";
			picture.url = $.uri;
			customEffectIndex++;
			if (customEffectIndex > 2)
				customEffectIndex = 0;
			picture.effect = theme.customEffects[customEffectIndex];
		]]></method>
		<method id="onLoaded" params="picture"><![CDATA[
			application.first.first.last.delegate("onLoaded");
		]]></method>
	</behavior>
	<transition id="CollageTransition" duration="1000">
		<method id="onBegin" params="container, content, picture"><![CDATA[
			var srcWidth = picture.width;
			var srcHeight = picture.height;
			var dstWidth = application.width;
			var dstHeight = application.height;
			var srcRatio = srcWidth / srcHeight;
			var dstRatio = dstWidth / dstHeight;
			var scale, dx, dy;
			if (srcRatio > dstRatio) {
				scale = dstHeight / srcHeight;
				dx = Math.round(srcWidth * scale) - dstWidth;
				dy = 0;
			}
			else {
				scale = dstWidth / srcWidth;
				dx = 0;
				dy =  Math.round(srcHeight * scale) - dstHeight;
			}
			picture.scale = { x: scale, y: scale };
			container.insert(picture, content.next);
			var layer = this.layer = new Layer(null, true, true);
			layer.capture(picture, 0, 0, dstWidth + dx, dstHeight + dy);
			var coordinates = layer.coordinates;
			layer.behavior = new CollageLayerBehavior(layer, { dx: dx, dy: dy });
			container.replace(picture, layer);
			picture.url = null;
			layer.start();
		]]></method>
		<method id="onEnd" params="container, content, picture"><![CDATA[
			container.remove(content);
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.layer.opacity = Math.quadEaseOut(fraction);
		]]></method>
	</transition>
	<transition id="CollageCloseTransition" duration="500">
		<method id="onBegin" params="container, tuner, collage"><![CDATA[
			tuner.visible = true;
			collage.active = false;
			var formerLayer = this.formerLayer = new Layer(null, true);
			formerLayer.attach(tuner);
			var currentLayer = this.currentLayer = new Layer(null, true);
			currentLayer.attach(collage);
		]]></method>
		<method id="onEnd" params="container, tuner, collage"><![CDATA[
			this.currentLayer.detach();
			this.formerLayer.detach();
			tuner.active = true;
			collage.visible = false;
			tuner.behavior.reset(tuner);
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.currentLayer.opacity = 1 - fraction;
		]]></method>
	</transition>
	<transition id="CollageOpenTransition" duration="500">
		<method id="onBegin" params="container, tuner, collage"><![CDATA[
			tuner.active = false;
			collage.visible = true;
			var formerLayer = this.formerLayer = new Layer(null, true);
			formerLayer.attach(tuner);
			var currentLayer = this.currentLayer = new Layer(null, true);
			currentLayer.attach(collage);
		]]></method>
		<method id="onEnd" params="container, tuner, collage"><![CDATA[
			this.currentLayer.detach();
			this.formerLayer.detach();
			tuner.visible = false;
			collage.active = true;
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.currentLayer.opacity = fraction;
		]]></method>
	</transition>
	
	<handler path="/getAudioMedia">
		<behavior>
			<method id="onComplete" params="handler, message, text"><![CDATA[
				var value;
				var lines = text.split("\n");
				var c = lines.length;
				if (lines[0] == "[playlist]") {
					for (var i = 1; i < c; i++) {
						var pair = lines[i].split("=");
						if (pair.length == 2) {
							var name = pair[0].toLowerCase();
							if (name.indexOf("file") == 0) {
								value = pair[1];
								break;
							}
						}
					}
				}
				if (value)
					handler.redirect(value, "audio/mpeg");
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var message = new Message("http://somafm.com/" + query.id + ".pls");
				handler.invoke(message, Message.TEXT);
			]]></method>
		</behavior>
	</handler>
	
	<handler path="/getImages">
		<behavior>
			<method id="onComplete" params="handler, message, json"><![CDATA[
				if (json && (true == json.result.success)) {
					handler.message.setResponseHeader("Content-Type", "text/plain");
					handler.message.responseText = JSON.stringify(json.result);
				}
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var message = new Message("http://k3.cloud.kinoma.com/api");
				message.method = "POST";
				var transaction = {
					"action": "Artist",
					"method": "getImages",
					"data": {
						"artistName": query.artist,
						"albumName": query.album,
						"screenWidth": query.width,
						"screenHeight": query.height,
						"screenMode": "max",
						"shuffle": false,
						"limit": 30
					}
				};		
				var body = JSON.stringify(transaction);
				message.requestText = body;
				message.setRequestHeader("Content-Length", body.length);
				handler.invoke(message, Message.JSON);
			]]></method>
		</behavior>
	</handler>
</program>