<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <skin id="MainContentSkin" color="#3f3f3f"/>
    <skin id="NameLabelBackgroundSkin" color="#afffffff"/>
    <style id="NameLabelStyle" font="24px bold" color="#2f2f2f">
        <margins left="5" right="5" top="5" bottom="5"/>
    </style>
    
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <handler path="/info">
        <behavior>
        	<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery( message.query );
				var info = {
					location: query.location,
					uuid: application.uuid,
                    picture: query.location + "picture",
					message: "Welcome to KPR!"
				}
				message.responseText = JSON.stringify( info );            
			]]></method>
        </behavior>
    </handler>

    <handler path="/picture">
        <behavior>
        	<method id="onInvoke" params="handler, message"><![CDATA[
				var uri = mergeURI( application.url, "assets/kinoma.png" );
				message.responseChunk = Files.readChunk( uri );
			]]></method>
        </behavior>
    </handler>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <behavior id="ApplicationBehavior">
        <method id="onLaunch" params="application"><![CDATA[
			this.viewerMap = new Object();
        
        	// request notifications for discovery of remote viewer applications 
            application.discover( "remoteviewer" );
            application.focus();
		]]></method>
        <method id="onQuit" params="application"><![CDATA[
			application.forget( "remoteviewer" );
		]]></method>
        <method id="onDiscovered" params="discoveries"><![CDATA[
            // first look to see if the viewer map contains entries that
            // are no longer in the discovery list, and remove them from
            // the map if no longer available...
            var viewerMap = this.viewerMap;
            
			for ( var uuid in viewerMap ) {
				var missing = true;
				for ( var j = 0; j < discoveries.length; j++ ) {
					if ( discoveries[ j ].uuid == uuid ) {
				       missing = false;
				       break;
				   }
				}
				if ( missing ) {
					application.distribute( "removeRemoteViewer", uuid );
					delete viewerMap[uuid];
                }
			}
			// next add any new discoveries that are not already in the viewer map...
			for ( var j = 0; j < discoveries.length; j++ ) {
				if ( ( discoveries[ j ].uuid in viewerMap ) == false ) {
					trace( "### discovered new remote device: " + discoveries[ j ].location + "\n" );
                    
					// add remote viewer to map
					viewerMap[ discoveries[ j ].uuid ] = discoveries[ j ];
                        
					// send a message to the remote viewer to get its picture and message
					application.invoke( new Message( discoveries[ j] .location + "info?location=" + discoveries[ j ].location ), Message.JSON );
				}
			}
		]]></method>
        <method id="onComplete" params="application, message"><![CDATA[
			var info = JSON.parse( message.responseText );
			
        	// we got the information (picture and message) back from the remote viewer, so now call the addRemoteViewer
        	// method in the main content panel's behavior
            application.distribute( "addRemoteViewer", info );
		]]></method>
    </behavior>

    <behavior id="BounceBehavior">
        <method id="onDisplaying" params="content"><![CDATA[
			this.initialize( content );
			content.offset = { x:content.container.width, y:content.container.height };
		]]></method>
        <method id="onDisplayed" params="content"><![CDATA[
			this.constrainedContainerWidth = content.container.width - content.width;
			this.constrainedContainerHeight = content.container.height - content.height;
			
			var container = content.container
			this.minX = container.x
			this.minY = container.y
			this.maxX = container.x + container.width - content.width
			this.maxY = container.y + container.height - content.height
			   
			content.offset = this.getStartOffset( content );
			content.start();
		]]></method>
        <method id="onTimeChanged" params="content"><![CDATA[
			this.animate( content );
		]]></method>
        <method id="onFinished" params="content"><![CDATA[
			this.animate( content );
		]]></method>
        <method id="initialize" params="content"><![CDATA[
        	var randomXDir = Math.random() < 0.5 ? -1 : 1;
        	var randomYDir = Math.random() < 0.5 ? -1 : 1;
        	var pixelsPerSecond = 200;
        	this.velocity = { x : pixelsPerSecond * randomXDir, y : pixelsPerSecond * randomYDir };
        	this.dt = 0;
        	this.lastTime = 0;
		]]></method>
        <method id="makeContentVisible" params="content"><![CDATA[
			content.visible = true;
			this.onDisplayed( content );
		]]></method>
        <method id="getStartOffset" params="content"><![CDATA[
			return { x:(content.container.width / 2) - (content.width / 2), y:(content.container.height / 2) - (content.height / 2) };
		]]></method>
        <method id="animate" params="content"><![CDATA[
        	var v = this.velocity;
        	var dt = this.dt;
	        		
       		dt = content.time - this.lastTime;
        	this.lastTime = content.time;
        	
        	var dx =  v.x * dt / 1000;
        	var dy = v.y * dt / 1000;
           
			// bounce
           	if ( content.x < this.minX ) {
           		v.x *= -1;
           		dx = this.minX - content.x;
           	}
           	else if ( content.x > this.maxX ) {
           		v.x *= -1;
           		dx = this.maxX - content.x;
           	}
   
           	if ( content.y < this.minY ) {
           		v.y *= -1;
           		dy = this.minY - content.y;
           	}
           	else if ( content.y > this.maxY ) {
           		v.y *= -1;
           		dy = this.maxY - content.y;
           	}

            content.moveBy( dx, dy );
		]]></method>
    </behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
    <container id="AvatarPanel" behavior="BounceBehavior" left="0" top="0" visible="false">
        <column>
            <picture url="$.picture">
                <behavior>
			        <method id="onLoaded" params="picture"><![CDATA[
						picture.bubble( "makeContentVisible" );
					]]></method>
                </behavior>
            </picture>
            <container skin="NameLabelBackgroundSkin">
                <label string="$.message" style="NameLabelStyle"/>
            </container>
        </column>
    </container>

    <container id="MainContentPanel" top="0" left="0" bottom="0" right="0" skin="MainContentSkin">
        <behavior>
	        <method id="onCreate"><![CDATA[
				this.avatarPanelMap = new Object();
			]]></method>
	        <method id="addRemoteViewer" params="content, info"><![CDATA[
	        	var panel = new AvatarPanel( info );
				content.add( panel );
				this.avatarPanelMap[ info.uuid ] = panel;
			]]></method>
	        <method id="removeRemoteViewer" params="content, uuid"><![CDATA[
				if ( uuid in this.avatarPanelMap ) {
					var panel = this.avatarPanelMap[ uuid ]
					if ( panel != null )
						content.remove( panel );
					delete this.avatarPanelMap[ uuid ];
				}
			]]></method>
        </behavior>
    </container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		application.behavior = new ApplicationBehavior();
		application.shared = true;		// Enable the application's server
            
		application.add( new MainContentPanel() );
	]]></script>

</program>
