/*  Copyright 2011-2016 Marvell Semiconductor, Inc.  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.*/
import { channels } from "credentials";

let channelBarSkin = new Skin({ fill: 'white' });
let radioChannelStyle = new Style({ color: 'white', font: '36px Fira Sans', horizontal: 'center', vertical: 'middle', left: 15, right: 15, });
let channelTickSkin = function() {	var space = 5;	var size = 10 * space;	var canvas = new Canvas({width:size, height:size});	var ctx = canvas.getContext("2d");	ctx.clearRect(0, 0, canvas.width, canvas.height);	ctx.lineWidth = 0.5;	ctx.strokeStyle = "white";	for (var x = 1; x < size; x += space) {		ctx.beginPath();		ctx.moveTo(x, 0);		ctx.lineTo(x, size);		ctx.stroke();	}	return new Skin(new Texture(canvas, 1), {x:0, y:0, width:size, height:20}, 0, 0, { left:0, right: 0});}();

let TunerBehaviors = new Array(4);TunerBehaviors[0] = class extends Behavior {  	onChannelChanging(container, index) {		let scroller = container.first;		this.index = index;		this.anchor = scroller.scroll.x;		this.delta = channels[index].offset - 160 - this.anchor;		scroller.tracking = true;		container.duration = Math.max(250, Math.abs(this.delta));		container.time = 0;		container.start();	}  	onFinished(container) {		let scroller = container.first;		scroller.tracking = false;		scroller.bubble("onChannelChanged", this.index);	}  	onTimeChanged(container) {		let scroller = container.first;		scroller.scroll = { x: this.anchor + (this.delta * Math.quadEaseOut(container.fraction)), y:0 };	}};TunerBehaviors[1] = class extends Behavior {  	onChannelChanged(scroller, index) {		this.index = index;		scroller.scroll = { x:channels[index].offset - 160, y:0 };	}  	onCreate(scroller, $) {		super.onCreate(scroller, $);		this.index = $.index;	}  	onDisplaying(scroller) {		scroller.scroll = { x:channels[this.index].offset - 160, y:0 };	}  	onScrolled(scroller) {		if (!scroller.tracking) scroller.bubble("onChannelChanged", this.index);	}  	snap(scroller, position, direction) {		var c = channels.length;		position += 160;		var left = channels[0].offset;		if (position < left) {			this.index = 0;			return left - 160;		}		for (var i = 1; i < c; i++) {			var right = channels[i].offset;			if (position < right) {				if (position - left < right - position) {					this.index = i - 1;					return left - 160;				}				this.index = i;				return right - 160;			}			left = right;		}		this.index = c - 1;		return right - 160;	}}TunerBehaviors[2] = class extends Behavior {  	onMeasureHorizontally(layout, width) {		let container = layout.first.next;		let i = 0;		let bottomCoordinates = { left:0, width:0, height:140, bottom:0 };		let bottomLabelCoordinates = { left:0, right:0, height:40, bottom:10 };		let bottomBarCoordinates = { left:0, width:3, height:35, bottom:45 };		let topCoordinates = { left:0, width:0, top:0, height:140 };		let topLabelCoordinates = { left:0, right:0, top:10, height:40, };		let topBarCoordinates = { left:0, width:3, top:45, height:35 };		let half;		while (container) {			let  channel = channels[i];			let  size = radioChannelStyle.measure(channel.title);			let  width = size.width;			half = width >> 1;			if (i == 0) {				bottomCoordinates.left = 160 - half;				topCoordinates.left = 160 - half;			}			if (i % 2) {				bottomCoordinates.width = width;				container.coordinates = bottomCoordinates;				container.first.coordinates = bottomLabelCoordinates;				bottomBarCoordinates.left = half - ((bottomCoordinates.left + half) % 5);				container.last.coordinates = bottomBarCoordinates;				channel.offset = bottomCoordinates.left + bottomBarCoordinates.left + 1;				bottomCoordinates.left += width;			}			else {				topCoordinates.width = width;				container.coordinates = topCoordinates;				container.first.coordinates = topLabelCoordinates;				topBarCoordinates.left = half - ((topCoordinates.left + half) % 5);				container.last.coordinates = topBarCoordinates;				channel.offset = topCoordinates.left + topBarCoordinates.left;				topCoordinates.left += width;			}			container = container.next;			i++;		}		bottomCoordinates.left += 160 - half;		topCoordinates.left += 160 - half;		return Math.max(bottomCoordinates.left, topCoordinates.left);	}}TunerBehaviors[3] = class extends Behavior {  	draw(canvas) {		let ctx = canvas.getContext("2d");		ctx.clearRect(0, 0, canvas.width, canvas.height);		ctx.beginPath();		ctx.arc(16, 15, 11, 0, 2 * Math.PI);		ctx.closePath();		ctx.lineWidth = 2;		ctx.fillStyle = "black";		ctx.fill();		ctx.strokeStyle = "white";		ctx.stroke();	}  	onCreate(canvas, $) {		this.data = $;		this.draw(canvas);	}}export var Tuner = Container.template($ => ({  	left: 0, right: 0, top: 0, bottom: 0, 	Behavior: TunerBehaviors[0], 	contents: [	  	Scroller($, { 	  		left: 0, right: 0, height: 140, active: true, clip: true,	  		Behavior: TunerBehaviors[1],	  		contents: [		  		Layout($, { 		  			left: 0, height: 140,		  			Behavior: TunerBehaviors[2], 		  			contents: [		  				Content($, { left: -320, right: -320, height: 20, skin: channelTickSkin, }),			  			(channels) ? channels.map($ => { var $$ = this; return [ Container($, {contents: [ Label($, { style: radioChannelStyle, string: $.title, }), Content($, { skin: channelBarSkin, }) ] }) ]}, $) : null, 					], 				}),		  		Canvas($, { 		  			left: 145, width: 30, height: 30, active: true,		  			Behavior: TunerBehaviors[3],		  		}),			], 		}),	]}));